// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createusers = `-- name: Createusers :one
INSERT INTO users (
    email, 
    password,
    role
) VALUES (
  $1, $2, $3
) RETURNING id, email, password, role, created_at
`

type CreateusersParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) Createusers(ctx context.Context, arg CreateusersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createusers, arg.Email, arg.Password, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteusers = `-- name: Deleteusers :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) Deleteusers(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteusers, id)
	return err
}

const getusers = `-- name: Getusers :one
SELECT id, email, password, role, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) Getusers(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getusers, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getusersByEmail = `-- name: GetusersByEmail :one
SELECT id, email, password, role, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetusersByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getusersByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const listusers = `-- name: Listusers :many
SELECT id, email, password, role, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListusersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listusers(ctx context.Context, arg ListusersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
