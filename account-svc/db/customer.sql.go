// Code generated by sqlc. DO NOT EDIT.
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
    email,
    full_name,
    address,
    kyc_type,
    kyc_id
) VALUES (
  $1, $2, $3, $4,$5
) RETURNING id, email, full_name, address, kyc_type, kyc_id, created_at
`

type CreateCustomerParams struct {
	Email    string `json:"email"`
	FullName string `json:"full_name"`
	Address  string `json:"address"`
	KycType  string `json:"kyc_type"`
	KycID    string `json:"kyc_id"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Email,
		arg.FullName,
		arg.Address,
		arg.KycType,
		arg.KycID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Address,
		&i.KycType,
		&i.KycID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, email, full_name, address, kyc_type, kyc_id, created_at FROM customer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Address,
		&i.KycType,
		&i.KycID,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, email, full_name, address, kyc_type, kyc_id, created_at FROM customer
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Address,
		&i.KycType,
		&i.KycID,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerByFullName = `-- name: GetCustomerByFullName :one
SELECT id, email, full_name, address, kyc_type, kyc_id, created_at FROM customer
WHERE full_name = $1 LIMIT 1
`

func (q *Queries) GetCustomerByFullName(ctx context.Context, fullName string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByFullName, fullName)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Address,
		&i.KycType,
		&i.KycID,
		&i.CreatedAt,
	)
	return i, err
}

const listCustomer = `-- name: ListCustomer :many
SELECT id, email, full_name, address, kyc_type, kyc_id, created_at FROM customer
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCustomerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomer(ctx context.Context, arg ListCustomerParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.Address,
			&i.KycType,
			&i.KycID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerKYC = `-- name: UpdateCustomerKYC :one
UPDATE customer 
SET kyc_type = $2,
 kyc_id = $3
WHERE id = $1
RETURNING id, email, full_name, address, kyc_type, kyc_id, created_at
`

type UpdateCustomerKYCParams struct {
	ID      int64  `json:"id"`
	KycType string `json:"kyc_type"`
	KycID   string `json:"kyc_id"`
}

func (q *Queries) UpdateCustomerKYC(ctx context.Context, arg UpdateCustomerKYCParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerKYC, arg.ID, arg.KycType, arg.KycID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Address,
		&i.KycType,
		&i.KycID,
		&i.CreatedAt,
	)
	return i, err
}
